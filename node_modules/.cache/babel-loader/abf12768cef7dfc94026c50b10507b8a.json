{"ast":null,"code":"import { collectionData, doc, docData, fromCollectionRef } from 'rxfire/firestore';\nimport { preloadFirestore, useObservable, checkIdField, checkStartWithValue } from '..';\nimport { preloadObservable } from '../useObservable';\nexport function preloadFirestoreDoc(refProvider, firebaseApp) {\n  return preloadFirestore(firebaseApp).then(function (firestore) {\n    var ref = refProvider(firestore());\n    return preloadObservable(doc(ref), ref.path);\n  });\n}\nexport function useFirestoreDoc(ref, options) {\n  return useObservable(doc(ref), 'firestore doc: ' + ref.path, options ? options.startWithValue : undefined);\n}\nexport function useFirestoreDocData(ref, options) {\n  return useObservable(docData(ref, checkIdField(options)), 'firestore docdata: ' + ref.path, checkStartWithValue(options));\n}\nexport function useFirestoreCollection(query, options) {\n  var queryId = getHashFromFirestoreQuery(query);\n  return useObservable(fromCollectionRef(query, checkIdField(options)), queryId, options ? options.startWithValue : undefined);\n}\n\nfunction getHashFromFirestoreQuery(query) {\n  var hash = query._query.canonicalId();\n\n  return \"firestore: \" + hash;\n}\n\nexport function useFirestoreCollectionData(query, options) {\n  var queryId = getHashFromFirestoreQuery(query);\n  return useObservable(collectionData(query, checkIdField(options)), queryId, checkStartWithValue(options));\n}","map":{"version":3,"sources":["C:/Users/Juan Pablo/Desktop/firebase-react-byte/node_modules/reactfire/firestore/index.js"],"names":["collectionData","doc","docData","fromCollectionRef","preloadFirestore","useObservable","checkIdField","checkStartWithValue","preloadObservable","preloadFirestoreDoc","refProvider","firebaseApp","then","firestore","ref","path","useFirestoreDoc","options","startWithValue","undefined","useFirestoreDocData","useFirestoreCollection","query","queryId","getHashFromFirestoreQuery","hash","_query","canonicalId","useFirestoreCollectionData"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,GAAzB,EAA8BC,OAA9B,EAAuCC,iBAAvC,QAAgE,kBAAhE;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,YAA1C,EAAwDC,mBAAxD,QAAmF,IAAnF;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAO,SAASC,mBAAT,CAA6BC,WAA7B,EAA0CC,WAA1C,EAAuD;AAC1D,SAAOP,gBAAgB,CAACO,WAAD,CAAhB,CAA8BC,IAA9B,CAAmC,UAAUC,SAAV,EAAqB;AAC3D,QAAIC,GAAG,GAAGJ,WAAW,CAACG,SAAS,EAAV,CAArB;AACA,WAAOL,iBAAiB,CAACP,GAAG,CAACa,GAAD,CAAJ,EAAWA,GAAG,CAACC,IAAf,CAAxB;AACH,GAHM,CAAP;AAIH;AACD,OAAO,SAASC,eAAT,CAAyBF,GAAzB,EAA8BG,OAA9B,EAAuC;AAC1C,SAAOZ,aAAa,CAACJ,GAAG,CAACa,GAAD,CAAJ,EAAW,oBAAoBA,GAAG,CAACC,IAAnC,EAAyCE,OAAO,GAAGA,OAAO,CAACC,cAAX,GAA4BC,SAA5E,CAApB;AACH;AACD,OAAO,SAASC,mBAAT,CAA6BN,GAA7B,EAAkCG,OAAlC,EAA2C;AAC9C,SAAOZ,aAAa,CAACH,OAAO,CAACY,GAAD,EAAMR,YAAY,CAACW,OAAD,CAAlB,CAAR,EAAsC,wBAAwBH,GAAG,CAACC,IAAlE,EAAwER,mBAAmB,CAACU,OAAD,CAA3F,CAApB;AACH;AACD,OAAO,SAASI,sBAAT,CAAgCC,KAAhC,EAAuCL,OAAvC,EAAgD;AACnD,MAAIM,OAAO,GAAGC,yBAAyB,CAACF,KAAD,CAAvC;AACA,SAAOjB,aAAa,CAACF,iBAAiB,CAACmB,KAAD,EAAQhB,YAAY,CAACW,OAAD,CAApB,CAAlB,EAAkDM,OAAlD,EAA2DN,OAAO,GAAGA,OAAO,CAACC,cAAX,GAA4BC,SAA9F,CAApB;AACH;;AACD,SAASK,yBAAT,CAAmCF,KAAnC,EAA0C;AACtC,MAAIG,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,WAAb,EAAX;;AACA,SAAO,gBAAgBF,IAAvB;AACH;;AACD,OAAO,SAASG,0BAAT,CAAoCN,KAApC,EAA2CL,OAA3C,EAAoD;AACvD,MAAIM,OAAO,GAAGC,yBAAyB,CAACF,KAAD,CAAvC;AACA,SAAOjB,aAAa,CAACL,cAAc,CAACsB,KAAD,EAAQhB,YAAY,CAACW,OAAD,CAApB,CAAf,EAA+CM,OAA/C,EAAwDhB,mBAAmB,CAACU,OAAD,CAA3E,CAApB;AACH","sourcesContent":["import { collectionData, doc, docData, fromCollectionRef } from 'rxfire/firestore';\nimport { preloadFirestore, useObservable, checkIdField, checkStartWithValue } from '..';\nimport { preloadObservable } from '../useObservable';\nexport function preloadFirestoreDoc(refProvider, firebaseApp) {\n    return preloadFirestore(firebaseApp).then(function (firestore) {\n        var ref = refProvider(firestore());\n        return preloadObservable(doc(ref), ref.path);\n    });\n}\nexport function useFirestoreDoc(ref, options) {\n    return useObservable(doc(ref), 'firestore doc: ' + ref.path, options ? options.startWithValue : undefined);\n}\nexport function useFirestoreDocData(ref, options) {\n    return useObservable(docData(ref, checkIdField(options)), 'firestore docdata: ' + ref.path, checkStartWithValue(options));\n}\nexport function useFirestoreCollection(query, options) {\n    var queryId = getHashFromFirestoreQuery(query);\n    return useObservable(fromCollectionRef(query, checkIdField(options)), queryId, options ? options.startWithValue : undefined);\n}\nfunction getHashFromFirestoreQuery(query) {\n    var hash = query._query.canonicalId();\n    return \"firestore: \" + hash;\n}\nexport function useFirestoreCollectionData(query, options) {\n    var queryId = getHashFromFirestoreQuery(query);\n    return useObservable(collectionData(query, checkIdField(options)), queryId, checkStartWithValue(options));\n}\n"]},"metadata":{},"sourceType":"module"}