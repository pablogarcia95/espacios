{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Pablo\\\\Desktop\\\\firebase-react-byte\\\\src\\\\Paper\\\\paper.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => {\n  const elevations = {};\n  theme.shadows.forEach((shadow, index) => {\n    elevations[`elevation${index}`] = {\n      boxShadow: shadow\n    };\n  });\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow')\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` */\n    outlined: {\n      border: `1px solid ${theme.palette.divider}`\n    },\n    ...elevations\n  };\n};\nconst Paper = React.forwardRef(function Paper(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    square = false,\n    elevation = 1,\n    variant = 'elevation',\n    ...other\n  } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (classes[`elevation${elevation}`] === undefined) {\n      console.error(`Material-UI: this elevation \\`${elevation}\\` is not implemented.`);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Component, Object.assign({\n    className: clsx(classes.root, {\n      [classes.rounded]: !square,\n      [classes[`elevation${elevation}`]]: variant === 'elevation',\n      [classes.outlined]: variant === 'outlined'\n    }, className),\n    ref: ref\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }));\n});\nPaper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: PropTypes.number,\n\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined'])\n};\nexport default withStyles(styles, {\n  name: 'MuiPaper'\n})(Paper);","map":{"version":3,"sources":["C:/Users/Juan Pablo/Desktop/firebase-react-byte/src/Paper/paper.js"],"names":["React","PropTypes","clsx","withStyles","styles","theme","elevations","shadows","forEach","shadow","index","boxShadow","root","backgroundColor","palette","background","paper","color","text","primary","transition","transitions","create","rounded","borderRadius","shape","outlined","border","divider","Paper","forwardRef","props","ref","classes","className","component","Component","square","elevation","variant","other","process","env","NODE_ENV","undefined","console","error","propTypes","children","node","object","string","elementType","number","bool","oneOf","name"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\n\nexport const styles = (theme) => {\n  const elevations = {};\n  theme.shadows.forEach((shadow, index) => {\n    elevations[`elevation${index}`] = {\n      boxShadow: shadow,\n    };\n  });\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow'),\n    },\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius,\n    },\n    /* Styles applied to the root element if `variant=\"outlined\"` */\n    outlined: {\n      border: `1px solid ${theme.palette.divider}`,\n    },\n    ...elevations,\n  };\n};\n\nconst Paper = React.forwardRef(function Paper(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    square = false,\n    elevation = 1,\n    variant = 'elevation',\n    ...other\n  } = props;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (classes[`elevation${elevation}`] === undefined) {\n      console.error(`Material-UI: this elevation \\`${elevation}\\` is not implemented.`);\n    }\n  }\n\n  return (\n    <Component\n      className={clsx(\n        classes.root,\n        {\n          [classes.rounded]: !square,\n          [classes[`elevation${elevation}`]]: variant === 'elevation',\n          [classes.outlined]: variant === 'outlined',\n        },\n        className,\n      )}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nPaper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: PropTypes.number,\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined']),\n};\n\nexport default withStyles(styles, { name: 'MuiPaper' })(Paper);\n"]},"metadata":{},"sourceType":"module"}