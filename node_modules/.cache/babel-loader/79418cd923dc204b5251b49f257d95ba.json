{"ast":null,"code":"import { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)',\n    // Text hints.\n    hint: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    hint: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffset);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffset * 1.5);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  const {\n    primary = {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700]\n    },\n    secondary = {\n      light: pink.A200,\n      main: pink.A400,\n      dark: pink.A700\n    },\n    error = {\n      light: red[300],\n      main: red[500],\n      dark: red[700]\n    },\n    warning = {\n      light: orange[300],\n      main: orange[500],\n      dark: orange[700]\n    },\n    info = {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700]\n    },\n    success = {\n      light: green[300],\n      main: green[500],\n      dark: green[700]\n    },\n    type = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2,\n    ...other\n  } = palette; // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n  function getContrastText(background) {\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`Material-UI: the contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  const augmentColor = (color, mainShade = 500, lightShade = 300, darkShade = 700) => {\n    color = { ...color\n    };\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.main) {\n      throw new Error(['Material-UI: the color provided to augmentColor(color) is invalid.', `The color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.`].join('\\n'));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(['Material-UI: the color provided to augmentColor(color) is invalid.', `\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.`, '', 'Did you intend to use one of the following approaches?', '', 'import {Â green } from \"@material-ui/core/colors\";', '', 'const theme1 = createMuiTheme({ palette: {', '  primary: green,', '} });', '', 'const theme2 = createMuiTheme({ palette: {', '  primary: { main: green[500] },', '} });'].join('\\n'));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  const types = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!types[type]) {\n      console.error(`Material-UI: the palette type \\`${type}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge({\n    // A collection of common colors.\n    common,\n    // The palette type, can be light or dark.\n    type,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset,\n    // The light and dark type object.\n    ...types[type]\n  }, other);\n  return paletteOutput;\n}","map":{"version":3,"sources":["C:/Users/Juan Pablo/Desktop/firebase-react-byte/node_modules/@material-ui/core/styles/createPalette.js"],"names":["deepmerge","common","grey","indigo","pink","red","orange","blue","green","darken","getContrastRatio","lighten","light","text","primary","secondary","disabled","hint","divider","background","paper","white","default","action","active","hover","hoverOpacity","selected","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","activatedOpacity","dark","icon","addLightOrDark","intent","direction","shade","tonalOffset","hasOwnProperty","main","createPalette","palette","A200","A400","A700","error","warning","info","success","type","contrastThreshold","other","getContrastText","contrastText","process","env","NODE_ENV","contrast","console","join","augmentColor","color","mainShade","lightShade","darkShade","Error","JSON","stringify","types","paletteOutput"],"mappings":"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","sourcesContent":["import { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\n\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)',\n    // Text hints.\n    hint: 'rgba(0, 0, 0, 0.38)',\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50],\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12,\n  },\n};\n\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    hint: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)',\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030',\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24,\n  },\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffset);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffset * 1.5);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  const {\n    primary = {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700],\n    },\n    secondary = {\n      light: pink.A200,\n      main: pink.A400,\n      dark: pink.A700,\n    },\n    error = {\n      light: red[300],\n      main: red[500],\n      dark: red[700],\n    },\n    warning = {\n      light: orange[300],\n      main: orange[500],\n      dark: orange[700],\n    },\n    info = {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700],\n    },\n    success = {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n    },\n    type = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2,\n    ...other\n  } = palette;\n\n  // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n  function getContrastText(background) {\n    const contrastText =\n      getContrastRatio(background, dark.text.primary) >= contrastThreshold\n        ? dark.text.primary\n        : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n      if (contrast < 3) {\n        console.error(\n          [\n            `Material-UI: the contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`,\n            'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',\n            'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast',\n          ].join('\\n'),\n        );\n      }\n    }\n\n    return contrastText;\n  }\n\n  const augmentColor = (color, mainShade = 500, lightShade = 300, darkShade = 700) => {\n    color = { ...color };\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.main) {\n      throw new Error(\n        [\n          'Material-UI: the color provided to augmentColor(color) is invalid.',\n          `The color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.`,\n        ].join('\\n'),\n      );\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(\n        [\n          'Material-UI: the color provided to augmentColor(color) is invalid.',\n          `\\`color.main\\` should be a string, but \\`${JSON.stringify(\n            color.main,\n          )}\\` was provided instead.`,\n          '',\n          'Did you intend to use one of the following approaches?',\n          '',\n          'import {Â green } from \"@material-ui/core/colors\";',\n          '',\n          'const theme1 = createMuiTheme({ palette: {',\n          '  primary: green,',\n          '} });',\n          '',\n          'const theme2 = createMuiTheme({ palette: {',\n          '  primary: { main: green[500] },',\n          '} });',\n        ].join('\\n'),\n      );\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  const types = { dark, light };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!types[type]) {\n      console.error(`Material-UI: the palette type \\`${type}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(\n    {\n      // A collection of common colors.\n      common,\n      // The palette type, can be light or dark.\n      type,\n      // The colors used to represent primary interface elements for a user.\n      primary: augmentColor(primary),\n      // The colors used to represent secondary interface elements for a user.\n      secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n      // The colors used to represent interface elements that the user should be made aware of.\n      error: augmentColor(error),\n      // The colors used to represent potentially dangerous actions or important messages.\n      warning: augmentColor(warning),\n      // The colors used to present information to the user that is neutral and not necessarily important.\n      info: augmentColor(info),\n      // The colors used to indicate the successful completion of an action that user triggered.\n      success: augmentColor(success),\n      // The grey colors.\n      grey,\n      // Used by `getContrastText()` to maximize the contrast between\n      // the background and the text.\n      contrastThreshold,\n      // Takes a background color and returns the text color that maximizes the contrast.\n      getContrastText,\n      // Generate a rich color object.\n      augmentColor,\n      // Used by the functions below to shift a color's luminance by approximately\n      // two indexes within its tonal palette.\n      // E.g., shift from Red 500 to Red 300 or Red 700.\n      tonalOffset,\n      // The light and dark type object.\n      ...types[type],\n    },\n    other,\n  );\n\n  return paletteOutput;\n}\n"]},"metadata":{},"sourceType":"module"}