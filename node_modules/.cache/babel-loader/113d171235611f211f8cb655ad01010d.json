{"ast":null,"code":"// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\nexport const easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\n}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\n\nexport const duration = {\n  shortest: 150,\n  shorter: 200,\n  short: 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195\n};\n\nfunction formatMs(milliseconds) {\n  return `${Math.round(milliseconds)}ms`;\n}\n/**\n * @param {string|Array} props\n * @param {object} param\n * @param {string} param.prop\n * @param {number} param.duration\n * @param {string} param.easing\n * @param {number} param.delay\n */\n\n\nexport default {\n  easing,\n  duration,\n  create: (props = ['all'], options = {}) => {\n    const {\n      duration: durationOption = duration.standard,\n      easing: easingOption = easing.easeInOut,\n      delay = 0,\n      ...other\n    } = options;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const isString = value => typeof value === 'string';\n\n      const isNumber = value => !isNaN(parseFloat(value));\n\n      if (!isString(props) && !Array.isArray(props)) {\n        console.error('Material-UI: argument \"props\" must be a string or Array.');\n      }\n\n      if (!isNumber(durationOption) && !isString(durationOption)) {\n        console.error(`Material-UI: argument \"duration\" must be a number or a string but found ${durationOption}.`);\n      }\n\n      if (!isString(easingOption)) {\n        console.error('Material-UI: argument \"easing\" must be a string.');\n      }\n\n      if (!isNumber(delay) && !isString(delay)) {\n        console.error('Material-UI: argument \"delay\" must be a number or a string.');\n      }\n\n      if (Object.keys(other).length !== 0) {\n        console.error(`Material-UI: unrecognized argument(s) [${Object.keys(other).join(',')}]`);\n      }\n    }\n\n    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');\n  },\n\n  getAutoHeightDuration(height) {\n    if (!height) {\n      return 0;\n    }\n\n    const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n\n    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Juan Pablo/Desktop/firebase-react-byte/node_modules/@material-ui/core/styles/transitions.js"],"names":["easing","easeInOut","easeOut","easeIn","sharp","duration","shortest","shorter","short","standard","complex","enteringScreen","leavingScreen","formatMs","milliseconds","Math","round","create","props","options","durationOption","easingOption","delay","other","process","env","NODE_ENV","isString","value","isNumber","isNaN","parseFloat","Array","isArray","console","error","Object","keys","length","join","map","animatedProp","getAutoHeightDuration","height","constant"],"mappings":"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","sourcesContent":["// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\nexport const easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)',\n};\n\n// Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\nexport const duration = {\n  shortest: 150,\n  shorter: 200,\n  short: 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195,\n};\n\nfunction formatMs(milliseconds) {\n  return `${Math.round(milliseconds)}ms`;\n}\n\n/**\n * @param {string|Array} props\n * @param {object} param\n * @param {string} param.prop\n * @param {number} param.duration\n * @param {string} param.easing\n * @param {number} param.delay\n */\nexport default {\n  easing,\n  duration,\n  create: (props = ['all'], options = {}) => {\n    const {\n      duration: durationOption = duration.standard,\n      easing: easingOption = easing.easeInOut,\n      delay = 0,\n      ...other\n    } = options;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const isString = (value) => typeof value === 'string';\n      const isNumber = (value) => !isNaN(parseFloat(value));\n      if (!isString(props) && !Array.isArray(props)) {\n        console.error('Material-UI: argument \"props\" must be a string or Array.');\n      }\n\n      if (!isNumber(durationOption) && !isString(durationOption)) {\n        console.error(\n          `Material-UI: argument \"duration\" must be a number or a string but found ${durationOption}.`,\n        );\n      }\n\n      if (!isString(easingOption)) {\n        console.error('Material-UI: argument \"easing\" must be a string.');\n      }\n\n      if (!isNumber(delay) && !isString(delay)) {\n        console.error('Material-UI: argument \"delay\" must be a number or a string.');\n      }\n\n      if (Object.keys(other).length !== 0) {\n        console.error(`Material-UI: unrecognized argument(s) [${Object.keys(other).join(',')}]`);\n      }\n    }\n\n    return (Array.isArray(props) ? props : [props])\n      .map(\n        (animatedProp) =>\n          `${animatedProp} ${\n            typeof durationOption === 'string' ? durationOption : formatMs(durationOption)\n          } ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`,\n      )\n      .join(',');\n  },\n  getAutoHeightDuration(height) {\n    if (!height) {\n      return 0;\n    }\n\n    const constant = height / 36;\n\n    // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}